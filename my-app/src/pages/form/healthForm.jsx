import { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./healthForm.css";
import Header from '../../components/Header/Header';
import Footer from '../../components/Footer/Footer';

export default function HealthFormApp() {
  const [formData, setFormData] = useState({
    personalInfo: {
      fullName: "",
      studentClass: "",
      birthDate: "",
      studentId: "",
    },
    bodyMeasurements: {
      height: "",
      weight: "",
    },
    allergies: "",
    chronicDiseases: "",
    medicalHistory: "",
    visionScore: "",
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitMessage, setSubmitMessage] = useState("");
  const navigate = useNavigate();

  const handleInputChange = (section, field, value) => {
    setFormData((prev) => ({
      ...prev,
      [section]: typeof prev[section] === "object"
        ? { ...prev[section], [field]: value }
        : value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitMessage("");

    try {
      const response = await fetch("/api/health-form", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const result = await response.json();

      if (result.success) {
        setSubmitMessage("Th√¥ng tin ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
        setTimeout(() => {
          navigate("/vaccineForm");
        }, 1200); // Ch·ªù 1.2 gi√¢y ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o tr∆∞·ªõc khi chuy·ªÉn trang
      } else {
        setSubmitMessage(result.message);
      }
    } catch (error) {
      console.error("Error submitting form:", error);
      setSubmitMessage("C√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng tin");
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleVisionChange = (value) => {
    setFormData((prev) => ({
      ...prev,
      visionScore: value,
    }));
  };

  const handleReset = () => {
    setFormData({
      personalInfo: {
        fullName: "",
        studentClass: "",
        birthDate: "",
        studentId: "",
      },
      bodyMeasurements: {
        height: "",
        weight: "",
      },
      allergies: "",
      chronicDiseases: "",
      medicalHistory: "",
      visionScore: "",
    });
    setSubmitMessage("");
  };

  return (
    <>
      <Header />
      <div className="health-form-bg">
        <div className="health-form-card">
          <div className="form-header big-header">
            <span className="form-header-icon big-icon">
              {/* B·∫°n c√≥ th·ªÉ d√πng icon SVG ho·∫∑c emoji ho·∫∑c FontAwesome */}

            </span>
            <div>
              <h1 className="form-title big-title">PHI·∫æU NH·∫¨P TH√îNG TIN S·ª®C KH·ªéE<br />H·ªåC SINH</h1>
              <p className="form-desc big-desc">Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c th√¥ng tin s·ª©c kh·ªèe c·ªßa h·ªçc sinh</p>
            </div>
          </div>
          <form onSubmit={handleSubmit} className="health-form">
            <fieldset>
              <legend className="section-title">
                TH√îNG TIN C√Å NH√ÇN
              </legend>
              <div className="form-row">
                <div className="form-group">
                  <label className="form-label">
                    <span className="input-icon">üÜî</span> H·ªç v√† t√™n h·ªçc sinh
                  </label>
                  <input
                    type="text"
                    placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
                    value={formData.personalInfo.fullName}
                    onChange={(e) => handleInputChange("personalInfo", "fullName", e.target.value)}
                  />
                </div>
                <div className="form-group">
                  <label className="form-label">
                    <span className="input-icon">üè´</span> L·ªõp
                  </label>
                  <input
                    type="text"
                    placeholder="V√≠ d·ª•: 5A"
                    value={formData.personalInfo.studentClass}
                    onChange={(e) => handleInputChange("personalInfo", "studentClass", e.target.value)}
                  />
                </div>
              </div>
              <div className="form-row">
                <div className="form-group">
                  <label className="form-label">
                    <span className="input-icon">üìÖ</span> Ng√†y sinh
                  </label>
                  <input
                    type="date"
                    value={formData.personalInfo.birthDate}
                    onChange={(e) => handleInputChange("personalInfo", "birthDate", e.target.value)}
                  />
                </div>
                <div className="form-group">
                  <label className="form-label">
                    <span className="input-icon">üÜî</span> M√£ h·ªçc sinh
                  </label>
                  <input
                    type="text"
                    placeholder="Nh·∫≠p m√£ h·ªçc sinh"
                    value={formData.personalInfo.studentId}
                    onChange={(e) => handleInputChange("personalInfo", "studentId", e.target.value)}
                  />
                </div>
              </div>
            </fieldset>

            <fieldset>
              <legend className="section-title">CH·ªà S·ªê C∆† TH·ªÇ</legend>
              <div className="form-row">
                <div className="form-group">
                  <label className="form-label">Chi·ªÅu cao (cm)</label>
                  <input
                    type="number"
                    placeholder="V√≠ d·ª•: 150"
                    value={formData.bodyMeasurements.height}
                    onChange={(e) => handleInputChange("bodyMeasurements", "height", e.target.value)}
                  />
                </div>
                <div className="form-group">
                  <label className="form-label">C√¢n n·∫∑ng (kg)</label>
                  <input
                    type="number"
                    placeholder="V√≠ d·ª•: 45"
                    value={formData.bodyMeasurements.weight}
                    onChange={(e) => handleInputChange("bodyMeasurements", "weight", e.target.value)}
                  />
                </div>
              </div>
            </fieldset>

            <fieldset>
              <legend className="section-title">TH√îNG TIN D·ªä ·ª®NG</legend>
              <div className="form-group">
                <label className="form-label">
                  D·ªã ·ª©ng (th·ª©c ƒÉn, thu·ªëc, m√¥i tr∆∞·ªùng...)
                </label>
                <textarea
                  placeholder="Nh·∫≠p c√°c lo·∫°i d·ªã ·ª©ng n·∫øu c√≥"
                  value={formData.allergies}
                  onChange={(e) => handleInputChange("allergies", null, e.target.value)}
                />
              </div>
            </fieldset>

            <fieldset>
              <legend className="section-title">B·ªÜNH M√ÉN T√çNH</legend>
              <div className="form-group">
                <label className="form-label">
                  B·ªánh m√£n t√≠nh (hen suy·ªÖn, ti·ªÉu ƒë∆∞·ªùng, tim m·∫°ch...)
                </label>
                <textarea
                  placeholder="Nh·∫≠p c√°c b·ªánh m√£n t√≠nh n·∫øu c√≥"
                  value={formData.chronicDiseases}
                  onChange={(e) => handleInputChange("chronicDiseases", null, e.target.value)}
                />
              </div>
            </fieldset>

            <fieldset>
              <legend className="section-title">TH·ªä L·ª∞C</legend>
              <div className="form-group">
                <label className="form-label">
                  ƒê√°nh gi√° th·ªã l·ª±c (1 - k√©m nh·∫•t, 10 - t·ªët nh·∫•t)
                </label>
                <input
                  type="number"
                  min="1"
                  max="10"
                  placeholder="Nh·∫≠p ƒëi·ªÉm th·ªã l·ª±c t·ª´ 1 ƒë·∫øn 10"
                  value={formData.visionScore}
                  onChange={(e) => handleVisionChange(e.target.value)}
                />
              </div>
            </fieldset>

            <fieldset>
              <legend className="section-title">TI·ªÄN S·ª¨ B·ªÜNH</legend>
              <div className="form-group">
                <label className="form-label">
                  Ti·ªÅn s·ª≠ b·ªánh v√† ƒëi·ªÅu tr·ªã
                </label>
                <textarea
                  placeholder="Nh·∫≠p ti·ªÅn s·ª≠ b·ªánh, c√°c l·∫ßn nh·∫≠p vi·ªán, ph·∫´u thu·∫≠t..."
                  value={formData.medicalHistory}
                  onChange={(e) => handleInputChange("medicalHistory", null, e.target.value)}
                />
              </div>
            </fieldset>

            <div className="form-note">
              <span>Th√¥ng tin s·ª©c kh·ªèe c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c b·∫£o m·∫≠t v√† ch·ªâ s·ª≠ d·ª•ng cho m·ª•c ƒë√≠ch chƒÉm s√≥c s·ª©c kh·ªèe t·∫°i tr∆∞·ªùng. Vui l√≤ng ki·ªÉm tra k·ªπ th√¥ng tin tr∆∞·ªõc khi g·ª≠i.</span>
            </div>

            <div className="form-actions">
              <button type="submit" disabled={isSubmitting} className="submit-btn">L∆ØU TH√îNG TIN</button>
              <button type="button" onClick={handleReset} className="reset-btn">L√ÄM L·∫†I</button>
            </div>
            {submitMessage && <p className="form-message">{submitMessage}</p>}
          </form>
        </div>
      </div>
      <Footer />
    </>
  );
}
